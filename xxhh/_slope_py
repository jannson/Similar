import sys, os, os.path
import codecs
import numpy as np
from scipy.sparse import *
from scipy import *

django_path = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(13, django_path)
os.environ['DJANGO_SETTINGS_MODULE'] = 'xxhh.settings'

from django.db.models import Count
from django.db.models import Q
from xxhh.models import *

#for obj in XhLogUd.objects.all()[0:10]:
#    print obj.post_id, obj.guid, obj.uaction

#for obj in XhLogUd.objects.filter(post_id=67400):
#    print obj.post_id, obj.guid, obj.uaction

#for obj in XhLogUd.objects.filter(guid='11a2458d-6a38-ccde-e176-af0971b26daf'):
#    print obj.post_id, obj.guid, obj.uaction

#print len(XhLogUd.objects.values("guid").distinct())
#print len(XhLogUd.objects.values("post_id").distinct())

RATE = {}
RATE['u'] = 3.0
RATE['d'] = 1.0

class Ratings(object):
    def __init__(self):
        all_objs = list(XhLogUd.objects.all())
        guid2id = {}
        id2guid = []
        i = 0
        for obj in all_objs:
            if obj.guid not in guid2id:
                guid = obj.guid
                guid2id[guid] = i
                id2guid.append(guid)
                i += 1

        self.guid2id = guid2id
        self.id2guid = id2guid
        
        max_item = 0
        post2id = {}
        id2post = []
        i = 0
        for obj in all_objs:
            if obj.post_id not in post2id:
                post_id = obj.post_id
                post2id[post_id] = i
                id2post.append(post_id)
                i += 1

        self.post2id = post2id
        self.id2post = id2post

        guids = [[] for _ in id2guid]
        for obj in all_objs:
            guids[guid2id[obj.guid]].append((RATE[obj.uaction.strip()], self.guid2id[obj.guid], self.post2id[obj.post_id]))
        self.guids = guids

    def by_user(self, id):
        return self.guids[id]

ratings = Ratings()
print 'Ratings created'

'''
n = 10
for rate in ratings.by_user(2):
    print rate
    n -= 1
    if n < 0:
        break
'''

class BiPolarSlopeOne(object):
    def __init__(self, ratings):
        self.ratings = ratings

    def init_model(self):
        self.diff_like = lil_matrix(dtype=float)
        self.freq_like = lil_matrix(dtype=int)
        self.diff_dislike = lil_matrix(dtype=float)
        self.freq_dislike = lil_matrix(dtype=float)
		self.user_average = [0 for _ in self.ratings.id2guid]

    def train(self)
        self.init_model()

        for user_id in self.ratings.id2guid:
            user_avg = 0.0
            for rate in self.ratings.by_user(user_id):
                user_avg += rate[0]
            user_avg = user_avg/len(self.ratings.by_user(user_id))

            for rate1 in self.ratings.by_user(user_id):
                for rate2 in self.ratings.by_user(user_id):
                    if rate1[0] > user_avg and rate2[0] > user_avg:
                        self.freq_like[rate1[2], rate2[2]] += 1
                        self.diff_like[rate1[2], rate2[2]] += rate1[0]-rate2[0]
                    elif rate1[0] < user_avg and rate2[0] < user_avg:
                        self.freq_dislike[rate1[2], rate2[2]] += 1
                        self.diff_dislike[rate1[2], rate2[2]] += rate1[0]-rate2[0]

bislope = BiPolarSlopeOne(ratings)

